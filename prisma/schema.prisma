generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id    String    @id @default(uuid())
    role  AdminRole @default(SUB)
    name  String
    email String    @unique
}

model User {
    id             String     @id @default(uuid())
    name           String
    email          String     @unique
    avatar         String?
    bio            String?
    phone          String?
    isVerified     Boolean    @default(false)
    isActive       Boolean    @default(true)
    registrationNo String     @unique
    branch         String
    year           Int
    wishlists      Wishlist[]
    feedback       Feedback?
    messages       Message[]
    conversations  Chat[]
}

model Verification {
    id        String             @id @default(uuid())
    userId    String             @unique
    imageId   String             @unique
    status    VerificationStatus @default(PENDING)
    createdAt DateTime           @default(now())
    updatedAt DateTime           @default(now())
    image     Image              @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model Image {
    id            String         @id @default(uuid())
    url           String         @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    items         Item[]
    verifications Verification[]
    Category      Category[]
}

model Item {
    id         String     @id @default(uuid())
    title      String
    price      Float
    sellerId   String
    isVerified Boolean    @default(false)
    isSold     Boolean    @default(false)
    categoryId String?
    images     Image[]
    category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    wishlists  Wishlist[]
}

model Category {
    id        String   @id @default(uuid())
    name      String   @unique
    imageId   String?
    image     Image?   @relation(fields: [imageId], references: [id], onDelete: SetNull)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    items     Item[]
}

model Wishlist {
    id        String   @id @default(uuid())
    userId    String
    itemId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

    @@unique([userId, itemId])
}

model Feedback {
    id        String   @id @default(uuid())
    content   String
    rating    Int      @default(1)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
    id          String    @id @default(uuid())
    content     String
    senderId    String
    chatId      String
    deliveredAt DateTime?
    readAt      DateTime?
    sentAt      DateTime  @default(now())
    sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
    Media       Media[]
}

model Media {
    id        String   @id @default(uuid())
    url       String
    messageId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Chat {
    id           String   @id @default(uuid())
    user1_id     String
    user2_id     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    participants User[]
}

enum AdminRole {
    SUPER
    SUB
}

enum VerificationStatus {
    PENDING
    VERIFIED
    REJECTED
}

enum ImageStatus {
    ACTIVE
    INACTIVE
}
